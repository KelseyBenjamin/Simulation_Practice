# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_m38b66de29ff08c23d587b5d094a0723b', [dirname(__file__)])
        except ImportError:
            import _m38b66de29ff08c23d587b5d094a0723b
            return _m38b66de29ff08c23d587b5d094a0723b
        if fp is not None:
            try:
                _mod = imp.load_module('_m38b66de29ff08c23d587b5d094a0723b', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _m38b66de29ff08c23d587b5d094a0723b = swig_import_helper()
    del swig_import_helper
else:
    import _m38b66de29ff08c23d587b5d094a0723b
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_value(self)
    def incr(self, n=1): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_equal(self, *args)
    def copy(self): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_copy(self)
    def next(self): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_next(self)
    def __next__(self): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator___next__(self)
    def previous(self): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_previous(self)
    def advance(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _m38b66de29ff08c23d587b5d094a0723b.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    all_keys = [attr for attr in dir(class_type) if not attr.startswith('__')and attr != '_s' ]
    data_keys = sorted(class_type.__swig_setmethods__.keys())
    method_keys = [ x for x in all_keys if x not in data_keys ]
    raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
     (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        # this line is changed to handle older swigs that used PySwigObject instead of the current SwigPyObject
        if type(value).__name__ == 'SwigPyObject' or type(value).__name__ == 'PySwigObject' :
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        all_keys = [attr for attr in dir(class_type) if not attr.startswith('__') and attr != '_s' ]
        data_keys = sorted(class_type.__swig_setmethods__.keys())
        method_keys = [ x for x in all_keys if x not in data_keys ]
        raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
         (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,1)

import sim_services
import m496ab9d9ae3d6a89daf6de4a1204eb3a
class SimEnvironment(sim_services.Environment):
    __swig_setmethods__ = {}
    for _s in [sim_services.Environment]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimEnvironment, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.Environment]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimEnvironment, name)
    __repr__ = _swig_repr
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_SimEnvironment()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "SimEnvironment", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SimEnvironment___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SimEnvironment___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_SimEnvironment
    __del__ = lambda self : None;
SimEnvironment_swigregister = _m38b66de29ff08c23d587b5d094a0723b.SimEnvironment_swigregister
SimEnvironment_swigregister(SimEnvironment)


def exec_collect_init(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.exec_collect_init(*args)
exec_collect_init = _m38b66de29ff08c23d587b5d094a0723b.exec_collect_init
class SysSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SysSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sched"] = _m38b66de29ff08c23d587b5d094a0723b.SysSimObject_sched_set
    __swig_getmethods__["sched"] = _m38b66de29ff08c23d587b5d094a0723b.SysSimObject_sched_get
    if _newclass:sched = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.SysSimObject_sched_get, _m38b66de29ff08c23d587b5d094a0723b.SysSimObject_sched_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_SysSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "SysSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SysSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SysSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SysSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SysSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_SysSimObject
    __del__ = lambda self : None;
SysSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.SysSimObject_swigregister
SysSimObject_swigregister(SysSimObject)

class MonteCarloSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonteCarloSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonteCarloSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mc"] = _m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject_mc_set
    __swig_getmethods__["mc"] = _m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject_mc_get
    if _newclass:mc = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject_mc_get, _m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject_mc_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_MonteCarloSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "MonteCarloSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_MonteCarloSimObject
    __del__ = lambda self : None;
MonteCarloSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.MonteCarloSimObject_swigregister
MonteCarloSimObject_swigregister(MonteCarloSimObject)

class MemoryManagerSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryManagerSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryManagerSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mm"] = _m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject_mm_set
    __swig_getmethods__["mm"] = _m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject_mm_get
    if _newclass:mm = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject_mm_get, _m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject_mm_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_MemoryManagerSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "MemoryManagerSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_MemoryManagerSimObject
    __del__ = lambda self : None;
MemoryManagerSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.MemoryManagerSimObject_swigregister
MemoryManagerSimObject_swigregister(MemoryManagerSimObject)

class CheckPointRestartSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckPointRestartSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckPointRestartSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cpr"] = _m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject_cpr_set
    __swig_getmethods__["cpr"] = _m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject_cpr_get
    if _newclass:cpr = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject_cpr_get, _m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject_cpr_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_CheckPointRestartSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "CheckPointRestartSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_CheckPointRestartSimObject
    __del__ = lambda self : None;
CheckPointRestartSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.CheckPointRestartSimObject_swigregister
CheckPointRestartSimObject_swigregister(CheckPointRestartSimObject)

class SieSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SieSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SieSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sie"] = _m38b66de29ff08c23d587b5d094a0723b.SieSimObject_sie_set
    __swig_getmethods__["sie"] = _m38b66de29ff08c23d587b5d094a0723b.SieSimObject_sie_get
    if _newclass:sie = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.SieSimObject_sie_get, _m38b66de29ff08c23d587b5d094a0723b.SieSimObject_sie_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_SieSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "SieSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SieSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SieSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SieSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.SieSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_SieSimObject
    __del__ = lambda self : None;
SieSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.SieSimObject_swigregister
SieSimObject_swigregister(SieSimObject)

class CommandLineArgumentsSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandLineArgumentsSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommandLineArgumentsSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd_args"] = _m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject_cmd_args_set
    __swig_getmethods__["cmd_args"] = _m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject_cmd_args_get
    if _newclass:cmd_args = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject_cmd_args_get, _m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject_cmd_args_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_CommandLineArgumentsSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "CommandLineArgumentsSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_CommandLineArgumentsSimObject
    __del__ = lambda self : None;
CommandLineArgumentsSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.CommandLineArgumentsSimObject_swigregister
CommandLineArgumentsSimObject_swigregister(CommandLineArgumentsSimObject)

class MessageSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mpublisher"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mpublisher_set
    __swig_getmethods__["mpublisher"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mpublisher_get
    if _newclass:mpublisher = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mpublisher_get, _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mpublisher_set)
    __swig_setmethods__["mcout"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mcout_set
    __swig_getmethods__["mcout"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mcout_get
    if _newclass:mcout = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mcout_get, _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mcout_set)
    __swig_setmethods__["mtcout"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mtcout_set
    __swig_getmethods__["mtcout"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mtcout_get
    if _newclass:mtcout = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mtcout_get, _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mtcout_set)
    __swig_getmethods__["mfile"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mfile_get
    if _newclass:mfile = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mfile_get)
    __swig_setmethods__["mdevice"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mdevice_set
    __swig_getmethods__["mdevice"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mdevice_get
    if _newclass:mdevice = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mdevice_get, _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_mdevice_set)
    __swig_getmethods__["pfile"] = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_pfile_get
    if _newclass:pfile = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_pfile_get)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_MessageSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "MessageSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_MessageSimObject
    __del__ = lambda self : None;
MessageSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.MessageSimObject_swigregister
MessageSimObject_swigregister(MessageSimObject)

class JITSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JITSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JITSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["jit"] = _m38b66de29ff08c23d587b5d094a0723b.JITSimObject_jit_set
    __swig_getmethods__["jit"] = _m38b66de29ff08c23d587b5d094a0723b.JITSimObject_jit_get
    if _newclass:jit = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.JITSimObject_jit_get, _m38b66de29ff08c23d587b5d094a0723b.JITSimObject_jit_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_JITSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "JITSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.JITSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.JITSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.JITSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.JITSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_JITSimObject
    __del__ = lambda self : None;
JITSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.JITSimObject_swigregister
JITSimObject_swigregister(JITSimObject)

class InputProcessorSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputProcessorSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputProcessorSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ip"] = _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_ip_set
    __swig_getmethods__["ip"] = _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_ip_get
    if _newclass:ip = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_ip_get, _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_ip_set)
    __swig_setmethods__["mtv"] = _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_mtv_set
    __swig_getmethods__["mtv"] = _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_mtv_get
    if _newclass:mtv = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_mtv_get, _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_mtv_set)
    __swig_setmethods__["units_map_ptr"] = _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_units_map_ptr_set
    __swig_getmethods__["units_map_ptr"] = _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_units_map_ptr_get
    if _newclass:units_map_ptr = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_units_map_ptr_get, _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_units_map_ptr_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_InputProcessorSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "InputProcessorSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_InputProcessorSimObject
    __del__ = lambda self : None;
    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject___len__(self, *args)
InputProcessorSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.InputProcessorSimObject_swigregister
InputProcessorSimObject_swigregister(InputProcessorSimObject)

class ThreadProcessEventSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadProcessEventSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadProcessEventSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ep"] = _m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject_ep_set
    __swig_getmethods__["ep"] = _m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject_ep_get
    if _newclass:ep = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject_ep_get, _m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject_ep_set)
    def __init__(self, *args, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_ThreadProcessEventSimObject(*args)
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            this.own(0)
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "ThreadProcessEventSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_ThreadProcessEventSimObject
    __del__ = lambda self : None;
ThreadProcessEventSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.ThreadProcessEventSimObject_swigregister
ThreadProcessEventSimObject_swigregister(ThreadProcessEventSimObject)

class EventManagerSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventManagerSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventManagerSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["em"] = _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_em_set
    __swig_getmethods__["em"] = _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_em_get
    if _newclass:em = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_em_get, _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_em_set)
    __swig_setmethods__["ep"] = _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_ep_set
    __swig_getmethods__["ep"] = _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_ep_get
    if _newclass:ep = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_ep_get, _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_ep_set)
    __swig_setmethods__["thread_process_event_so"] = _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_thread_process_event_so_set
    __swig_getmethods__["thread_process_event_so"] = _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_thread_process_event_so_get
    if _newclass:thread_process_event_so = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_thread_process_event_so_get, _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_thread_process_event_so_set)
    def create_thread_process_event(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_create_thread_process_event(self, *args)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_EventManagerSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "EventManagerSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_EventManagerSimObject
    __del__ = lambda self : None;
EventManagerSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.EventManagerSimObject_swigregister
EventManagerSimObject_swigregister(EventManagerSimObject)

class VariableServerSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariableServerSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VariableServerSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vs"] = _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_vs_set
    __swig_getmethods__["vs"] = _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_vs_get
    if _newclass:vs = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_vs_get, _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_vs_set)
    __swig_getmethods__["sim_control_panel"] = _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_sim_control_panel_get
    if _newclass:sim_control_panel = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_sim_control_panel_get)
    __swig_getmethods__["trick_view"] = _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_trick_view_get
    if _newclass:trick_view = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_trick_view_get)
    __swig_getmethods__["malfunctions_trick_view"] = _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_malfunctions_trick_view_get
    if _newclass:malfunctions_trick_view = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_malfunctions_trick_view_get)
    __swig_getmethods__["stripchart"] = _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_stripchart_get
    if _newclass:stripchart = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_stripchart_get)
    __swig_getmethods__["monte_monitor"] = _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_monte_monitor_get
    if _newclass:monte_monitor = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_monte_monitor_get)
    def monte_carlo_disable_all_apps(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_monte_carlo_disable_all_apps(self, *args)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_VariableServerSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "VariableServerSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_VariableServerSimObject
    __del__ = lambda self : None;
VariableServerSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.VariableServerSimObject_swigregister
VariableServerSimObject_swigregister(VariableServerSimObject)

class DataRecordDispatcherSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataRecordDispatcherSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataRecordDispatcherSimObject, name)
    __repr__ = _swig_repr
    __swig_getmethods__["drd"] = _m38b66de29ff08c23d587b5d094a0723b.DataRecordDispatcherSimObject_drd_get
    if _newclass:drd = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.DataRecordDispatcherSimObject_drd_get)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_DataRecordDispatcherSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "DataRecordDispatcherSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.DataRecordDispatcherSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.DataRecordDispatcherSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.DataRecordDispatcherSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.DataRecordDispatcherSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_DataRecordDispatcherSimObject
    __del__ = lambda self : None;
DataRecordDispatcherSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.DataRecordDispatcherSimObject_swigregister
DataRecordDispatcherSimObject_swigregister(DataRecordDispatcherSimObject)

class RTSyncSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RTSyncSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RTSyncSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gtod_clock"] = _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_gtod_clock_set
    __swig_getmethods__["gtod_clock"] = _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_gtod_clock_get
    if _newclass:gtod_clock = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_gtod_clock_get, _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_gtod_clock_set)
    __swig_setmethods__["itimer"] = _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_itimer_set
    __swig_getmethods__["itimer"] = _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_itimer_get
    if _newclass:itimer = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_itimer_get, _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_itimer_set)
    __swig_setmethods__["rt_sync"] = _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_rt_sync_set
    __swig_getmethods__["rt_sync"] = _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_rt_sync_get
    if _newclass:rt_sync = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_rt_sync_get, _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_rt_sync_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_RTSyncSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "RTSyncSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_RTSyncSimObject
    __del__ = lambda self : None;
RTSyncSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.RTSyncSimObject_swigregister
RTSyncSimObject_swigregister(RTSyncSimObject)

class FrameLogSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameLogSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameLogSimObject, name)
    __repr__ = _swig_repr
    __swig_getmethods__["frame_log"] = _m38b66de29ff08c23d587b5d094a0723b.FrameLogSimObject_frame_log_get
    if _newclass:frame_log = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.FrameLogSimObject_frame_log_get)
    def __init__(self, *args, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_FrameLogSimObject(*args)
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            this.own(0)
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "FrameLogSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.FrameLogSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.FrameLogSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.FrameLogSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.FrameLogSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_FrameLogSimObject
    __del__ = lambda self : None;
FrameLogSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.FrameLogSimObject_swigregister
FrameLogSimObject_swigregister(FrameLogSimObject)

class MasterSlaveSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MasterSlaveSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MasterSlaveSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["master"] = _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_master_set
    __swig_getmethods__["master"] = _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_master_get
    if _newclass:master = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_master_get, _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_master_set)
    __swig_setmethods__["slave"] = _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_slave_set
    __swig_getmethods__["slave"] = _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_slave_get
    if _newclass:slave = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_slave_get, _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_slave_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_MasterSlaveSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "MasterSlaveSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_MasterSlaveSimObject
    __del__ = lambda self : None;
MasterSlaveSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.MasterSlaveSimObject_swigregister
MasterSlaveSimObject_swigregister(MasterSlaveSimObject)

class InstrumentationSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentationSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentationSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["echo_jobs"] = _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_echo_jobs_set
    __swig_getmethods__["echo_jobs"] = _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_echo_jobs_get
    if _newclass:echo_jobs = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_echo_jobs_get, _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_echo_jobs_set)
    __swig_setmethods__["debug_pause"] = _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_debug_pause_set
    __swig_getmethods__["debug_pause"] = _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_debug_pause_get
    if _newclass:debug_pause = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_debug_pause_get, _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_debug_pause_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_InstrumentationSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "InstrumentationSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_InstrumentationSimObject
    __del__ = lambda self : None;
InstrumentationSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.InstrumentationSimObject_swigregister
InstrumentationSimObject_swigregister(InstrumentationSimObject)

class DMTCPSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMTCPSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMTCPSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dmtcp"] = _m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject_dmtcp_set
    __swig_getmethods__["dmtcp"] = _m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject_dmtcp_get
    if _newclass:dmtcp = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject_dmtcp_get, _m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject_dmtcp_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_DMTCPSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "DMTCPSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_DMTCPSimObject
    __del__ = lambda self : None;
DMTCPSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.DMTCPSimObject_swigregister
DMTCPSimObject_swigregister(DMTCPSimObject)

class InjectorExecSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InjectorExecSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InjectorExecSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rtie"] = _m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject_rtie_set
    __swig_getmethods__["rtie"] = _m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject_rtie_get
    if _newclass:rtie = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject_rtie_get, _m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject_rtie_set)
    def __init__(self, *args, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_InjectorExecSimObject(*args)
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            this.own(0)
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "InjectorExecSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_InjectorExecSimObject
    __del__ = lambda self : None;
InjectorExecSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.InjectorExecSimObject_swigregister
InjectorExecSimObject_swigregister(InjectorExecSimObject)

class InjectorSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InjectorSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InjectorSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rtis"] = _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_rtis_set
    __swig_getmethods__["rtis"] = _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_rtis_get
    if _newclass:rtis = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_rtis_get, _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_rtis_set)
    __swig_setmethods__["injector_executor_so"] = _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_injector_executor_so_set
    __swig_getmethods__["injector_executor_so"] = _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_injector_executor_so_get
    if _newclass:injector_executor_so = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_injector_executor_so_get, _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_injector_executor_so_set)
    def create_injector_executors(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_create_injector_executors(self, *args)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_InjectorSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "InjectorSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_InjectorSimObject
    __del__ = lambda self : None;
InjectorSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.InjectorSimObject_swigregister
InjectorSimObject_swigregister(InjectorSimObject)

class ZeroconfSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroconfSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroconfSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["zc"] = _m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject_zc_set
    __swig_getmethods__["zc"] = _m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject_zc_get
    if _newclass:zc = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject_zc_get, _m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject_zc_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_ZeroconfSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "ZeroconfSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_ZeroconfSimObject
    __del__ = lambda self : None;
ZeroconfSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.ZeroconfSimObject_swigregister
ZeroconfSimObject_swigregister(ZeroconfSimObject)

class UnitTestSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitTestSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitTestSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["unit_tests"] = _m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject_unit_tests_set
    __swig_getmethods__["unit_tests"] = _m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject_unit_tests_get
    if _newclass:unit_tests = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject_unit_tests_get, _m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject_unit_tests_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_UnitTestSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "UnitTestSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_UnitTestSimObject
    __del__ = lambda self : None;
UnitTestSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.UnitTestSimObject_swigregister
UnitTestSimObject_swigregister(UnitTestSimObject)

class UdUnitsSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UdUnitsSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UdUnitsSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["udunits"] = _m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject_udunits_set
    __swig_getmethods__["udunits"] = _m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject_udunits_get
    if _newclass:udunits = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject_udunits_get, _m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject_udunits_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_UdUnitsSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "UdUnitsSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_UdUnitsSimObject
    __del__ = lambda self : None;
UdUnitsSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.UdUnitsSimObject_swigregister
UdUnitsSimObject_swigregister(UdUnitsSimObject)

class LanderSimObject(sim_services.SimObject):
    __swig_setmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LanderSimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [sim_services.SimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LanderSimObject, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lander"] = _m38b66de29ff08c23d587b5d094a0723b.LanderSimObject_lander_set
    __swig_getmethods__["lander"] = _m38b66de29ff08c23d587b5d094a0723b.LanderSimObject_lander_get
    if _newclass:lander = _swig_property(_m38b66de29ff08c23d587b5d094a0723b.LanderSimObject_lander_get, _m38b66de29ff08c23d587b5d094a0723b.LanderSimObject_lander_set)
    def __init__(self, **kwargs):
        import _sim_services
        this = _m38b66de29ff08c23d587b5d094a0723b.new_LanderSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "LanderSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    def call_function(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.LanderSimObject_call_function(self, *args)
    def call_function_double(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.LanderSimObject_call_function_double(self, *args)
    def __getitem__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.LanderSimObject___getitem__(self, *args)
    def __len__(self, *args): return _m38b66de29ff08c23d587b5d094a0723b.LanderSimObject___len__(self, *args)
    __swig_destroy__ = _m38b66de29ff08c23d587b5d094a0723b.delete_LanderSimObject
    __del__ = lambda self : None;
LanderSimObject_swigregister = _m38b66de29ff08c23d587b5d094a0723b.LanderSimObject_swigregister
LanderSimObject_swigregister(LanderSimObject)


def castAsSimEnvironment(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsSimEnvironment(*args)
castAsSimEnvironment = _m38b66de29ff08c23d587b5d094a0723b.castAsSimEnvironment

def castAsSysSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsSysSimObject(*args)
castAsSysSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsSysSimObject

def castAsMonteCarloSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsMonteCarloSimObject(*args)
castAsMonteCarloSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsMonteCarloSimObject

def castAsMemoryManagerSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsMemoryManagerSimObject(*args)
castAsMemoryManagerSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsMemoryManagerSimObject

def castAsCheckPointRestartSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsCheckPointRestartSimObject(*args)
castAsCheckPointRestartSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsCheckPointRestartSimObject

def castAsSieSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsSieSimObject(*args)
castAsSieSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsSieSimObject

def castAsCommandLineArgumentsSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsCommandLineArgumentsSimObject(*args)
castAsCommandLineArgumentsSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsCommandLineArgumentsSimObject

def castAsMessageSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsMessageSimObject(*args)
castAsMessageSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsMessageSimObject

def castAsJITSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsJITSimObject(*args)
castAsJITSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsJITSimObject

def castAsInputProcessorSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsInputProcessorSimObject(*args)
castAsInputProcessorSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsInputProcessorSimObject

def castAsThreadProcessEventSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsThreadProcessEventSimObject(*args)
castAsThreadProcessEventSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsThreadProcessEventSimObject

def castAsEventManagerSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsEventManagerSimObject(*args)
castAsEventManagerSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsEventManagerSimObject

def castAsVariableServerSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsVariableServerSimObject(*args)
castAsVariableServerSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsVariableServerSimObject

def castAsDataRecordDispatcherSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsDataRecordDispatcherSimObject(*args)
castAsDataRecordDispatcherSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsDataRecordDispatcherSimObject

def castAsRTSyncSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsRTSyncSimObject(*args)
castAsRTSyncSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsRTSyncSimObject

def castAsFrameLogSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsFrameLogSimObject(*args)
castAsFrameLogSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsFrameLogSimObject

def castAsMasterSlaveSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsMasterSlaveSimObject(*args)
castAsMasterSlaveSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsMasterSlaveSimObject

def castAsInstrumentationSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsInstrumentationSimObject(*args)
castAsInstrumentationSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsInstrumentationSimObject

def castAsDMTCPSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsDMTCPSimObject(*args)
castAsDMTCPSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsDMTCPSimObject

def castAsInjectorExecSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsInjectorExecSimObject(*args)
castAsInjectorExecSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsInjectorExecSimObject

def castAsInjectorSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsInjectorSimObject(*args)
castAsInjectorSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsInjectorSimObject

def castAsZeroconfSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsZeroconfSimObject(*args)
castAsZeroconfSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsZeroconfSimObject

def castAsUnitTestSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsUnitTestSimObject(*args)
castAsUnitTestSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsUnitTestSimObject

def castAsUdUnitsSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsUdUnitsSimObject(*args)
castAsUdUnitsSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsUdUnitsSimObject

def castAsLanderSimObject(*args):
  return _m38b66de29ff08c23d587b5d094a0723b.castAsLanderSimObject(*args)
castAsLanderSimObject = _m38b66de29ff08c23d587b5d094a0723b.castAsLanderSimObject
# This file is compatible with both classic and new-style classes.


